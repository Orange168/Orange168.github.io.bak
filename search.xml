<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Gradle 学习积累]]></title>
      <url>%2F2017%2F01%2F08%2Fgradle-note%2F</url>
      <content type="text"><![CDATA[基础教程 实践博客 Google’s guide on Gradle for Android 美团Android自动化之旅—适配渠道包 Android Gradle实战中遇到的问题与经验 Maven 建立企业内部maven服务器并使用Android Studio发布公共项目。 Gradle Tutorial Gradle 用法总结 构建神器Gradle 翻译gradle for android ==&gt;gradle for android pdf Writing Custom Plugins gradle官方文档，自定义插件拿到Project类，就可以拿到几乎所有工程配置的属性和方法，然后发挥想象控制你的工程。 官网资料 Chapter 23. Dependency Management 【待研究】 Chapter 45. The Java Plugin DependencyHandler Gradle Plugin User Guide Android Studio 官网提供的Gradle实用教程 Android Plugin DSL Reference build.gradle android{….} API 进阶博文 Android Gradle编译过程 比较详细的讲述了Gradle 编译 Apk的过程。 Weapons for Boilerplate Destruction 之Gradle 篇以上project.extensions.create….,可以使用${project.myextension.aNumber}访问到对应的属性 进阶源码阅读 hugo JakeWharton 不必介绍了。项目中使用Gradle plugin 和自定义Task 顺便学习一些Process Annotation. 开源插件 gradle-android-junit-jacoco-plugin可以生成代码单元测试覆盖率报告的 Gradle 插件。 gradle-android-javadoc-plugin可以生成 java doc 的 Gradle 插件。 gradle-android-apk-size-plugin可以将 Apk 大小记录到 CSV 文件的 Gradle 插件。 android-fat-aar Gradle script that allows you to merge and embed dependencies in generted aar file. ProperDroid simplifies the way that config different variant on your project. dexcount-gradle-plugin A Gradle plugin to report the number of method references in your APK on every build. 使用案例 本地引入.aar文件 12345678dependencies &#123; compile(name:'nameOfYourAARFileWithoutExtension', ext:'aar') &#125;repositories&#123; flatDir&#123; dirs 'libs' &#125; &#125; gradleBuildTime.gradle 获取build脚本每个任务（Task）执行的时间。 gradle.properties 自定义 buildConfigField 外部变量 修改output/apk/[自定义].apk 每次构建工程把git版本控制的信息加入VersionName中 123def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()def gitTag = 'git tag'.execute([], project.rootDir).text.trim().split("\n").last()def gitCommits = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim()) 动态修改Manifest中的参数 1234567891011121314android &#123; compileSdkVersion 23 buildToolsVersion '23.0.2' defaultConfig &#123; applicationId "com.liulishuo.engzo" minSdkVersion 15 targetSdkVersion 23 manifestPlaceholders = [ // 这里需要换成:tencent+你的AppId "tencentAuthId": "tencent123456", ] &#125;｝ 使用全局变量进行依赖版本及一些常用配置的统一管理 配置 Apk split 使Android Studio每个对应的Cpu 架构都生成单独的apk，减小整个应用的大小。 rootdirOfProject/gradle.properties 配置变量如： VERSION_NAME=1.2.2-SNAPSHOT 然后可以在配置文件所在项目中的所有*.gradle 文件直接引用。 有点类似Java public static的感觉。 Java 指定JDK版本 12345678android &#123; compileOptions &#123; sourceCompatibility JavaVersion.VERSION_1_7 targetCompatibility JavaVersion.VERSION_1_7// targetCompatibility JavaVersion.VERSION_1_8// sourceCompatibility JavaVersion.VERSION_1_8 &#125;&#125; 签名信息(release.keystore)的存放方式 stackoverflow Android — How to add Gradle dependencies using ‘foreach’ 很多开源项目都把依赖统一管理, 这个博文是做得做系统和简洁 问题解决 依赖更新项目依赖的远程包如果有更新，会有提醒或者自动更新吗？ 不会的，需要你手动设置changing标记为true，这样gradle会每24小时检查更新，通过更改resolutionStrategy可以修改检查周期。1234567configurations.all &#123;// check for updates every buildresolutionStrategy.cacheChangingModulesFor 0, 'seconds'&#125;dependencies &#123;compile group: "group", name: "projectA", version: "1.1-SNAPSHOT", changing: true&#125; 之前上传aar同一版本到maven仓库，但依赖却没有更新，该怎么办呢?可以直接删除本地缓存，缓存在~/.gradle/caches目录下，删除缓存后，下次运行就会自动重新下载远程依赖了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android测试资源集合,测试工具,测试开源项目]]></title>
      <url>%2F2016%2F12%2F03%2Fandroid-test%2F</url>
      <content type="text"><![CDATA[测试第三方服务 国内 https://bugly.qq.com/v2/ 腾讯的bugly 免费, 而且相当好用 腾讯优测云 提供真机测试和漏洞分析 Testin MTC 易测云 国外 TestCloud Testdroid Nimbledroid Automated performance analysis website Test bird APP和手游测试 第三方性能采集SDK OneAPM 听云 自动化测试 CircleCI 一个基于Github的自动化测试，单元测试工具，提供一个免费的私有仓库。 Google官方学习资料 Best Practices for Testing 【最新/重点】 Android Testing Support library (ATSL) 【重点】相关视频： Android Testing (Android Dev Summit 2015) youtube 2015年视频 Developer API Testing Concepts 优秀博客 Java 测试 Leveraging product flavors in Android Studio for hermetic testing 与之对应的 codelab学习地址笔记： Just Say No to More End-to-End Tests two JUnit Rules @rule will be launched before @Before. The ActivityTestRule is a rule that provides functional testing of a single Activity. Test coverage report for Android application 使用jacoco-android plugin in a build.gradle进行测试覆盖率报告 Android单元测试在蘑菇街支付金融部门的实践 很详细介绍了单元测试在实践操作中的使用 RxJava Test Unit Testing RxJava Observables and Subscriptions Unit Testing RxJava Observables Unit Testing with RxJava 测试框架 Unit Testing Junit4 Github A programmer-oriented testing framework for Java.http://junit.org/junit4/ Mockito Tasty mocking framework for unit tests in Java JMockit An automated testing toolkit for Java对比： mockito不能mock static method和final class、final method，JMockit可以；对比Mockito和JMockit的文章 PowerMock 一个可以Mock静态类的开源库 Tools for UI Testing: Robotium, Appium, Calabash, Robolectric. UI Testing Espresso Android 官方推荐使用的UI测试库 UIAutomator 可以夸应用进行测试 Robolectric is a unit test framework that de-fangs the Android SDK jar so you can test-drive the development of your Android app. Tests run inside the JVM on your workstation in seconds More RoboSpock Github A testing framework which brings powers of Spock and Groovy to Android app testing http://robospock.org Hamcrest matchersWhat is Hamcrest?Hamcrest is a library of matchers, which can be combined in to create flexible expressions of intent in tests. They’ve also been used for other purposes. 开源库 Collection awesome-android-testing collection of android test info 【重点】 Sample android-gradle-java-template Gradle + Android Studio + Robolectric + Espresso + Mockito + EasyMock/PowerMock + JaCoCo Demo Android-Clean-Testing Android Testing Sample Project robotium-showcase This example shows how to use Robotium with ActvitityTestRule and @Test annotation, it means in Google’s Espresso way. Google Sample android-testing-templates android-testing A collection of samples demonstrating different frameworks and techniques for automated testing Tools 测试工具square/spoon在adb devices 检测到的设备跑测试程序，并提供截屏，文件，数据库操作：最最重要的是生成简单明了的测试报告： Android Studio 2.2 Preview new feature: Espresso Test Recorder 菜单/run/Recorder Expresso Test 选项可以记录你的操作并转化为Espresso 的测试代码 APK Analyzer 菜单/build/Analyzer APK 提供APK大小分析工具，清楚的知道代码体积变换的趋势。 screengrab 当UI Tests 时自动化截屏STF 远程控制，一台电脑控制测试多个测试设openstf.github.io Control and manage Android devices from your browser 开发时的调试工具stethoFacebook开源，很强大的Android网络和数据库调试工具,能像调试WebApp一样调试Android原生应用。借助Stetho在Chrome上调试Android网络&amp;数据库常用配置: 初始化 123456public class MyApplication extends Application &#123; public void onCreate() &#123; super.onCreate(); Stetho.initializeWithDefaults(this); &#125;&#125; Chrome浏览器打开chrome://inspect/#devices 进阶增加网络拦截 Dependency 增加依赖环境 12345compile 'com.facebook.stetho:stetho:1.3.1'compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'compile 'com.squareup.okhttp3:okhttp:3.2.0'compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta4' 向OkHttpClient增加网络拦截 123OkHttpClient client = new OkHttpClient.Builder() .addNetworkInterceptor(new StethoInterceptor()) .build(); augmented-traffic-controlFackbook开源项目模拟移动网络，对App的调试及网络优化有很大的帮助，主要参数有：12345网络带宽（bandwidth）延迟（latency）丢包率（packet loss）错包率（corrupted packets）乱序率（packets ordering） GT（随身调） 腾讯开源的测试套件能Android设备上安装,进行移动调试,确保测试数据的真实有效性开源地址: https://github.com/TencentOpen/GT官网地址 使用GT APP进行快速的性能测试(CPU、内存、流量、电量、帧率/流畅度等等)、开发日志的查看、Crash日志查看、网络数据包的抓取、APP内部参数的调试、真机代码耗时统计等。 12345678910111213141516一. 基本功能测试1. CPU占有率;2 jiffes（CPU时间片）;3. 内存PSS值稳定在36M;4. 网络上行流量和下行流量;5. "数据存档"二. 电量测试再启动电流监控观察，1分钟后平均电流是220mA三. crash- 保存了抓包文件后;- Logcat查看界面，立即把手机缓存的Logcat日志保存下来;四. Net- 系统提供的流量查看也包括局域网socket的流量,而且不能分时段统计;- tcpdump抓包(需要手机root) + Wiresharek 抓包分析;疑问点:1. 激活FPS（帧率）的监测; Purchase UI Tool (付费工具) Robotium Recorder]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo Tutorial]]></title>
      <url>%2F2016%2F12%2F03%2Fhexo-tutorial%2F</url>
      <content type="text"><![CDATA[Hexo 相关教程 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Hexo安装环境准备 Git / Node.js hexo官方教程两个初始化命令hexo init 类似git init 需要新建目录保存博文信息； 执行命令会在当前目录下生产如下文件：123456├── _config.yml #全局配置文件├── node_modules #Hexo插件（Node.js 插件默认安装目录）├── package.json #Node 工程的依赖和基本信息├── scaffolds #模板├── source #博客正文源文件└── themes 【重点】如果你有配置，会覆盖你原来的配置； npm install #安装package.json 下面的依赖包hexo http://localhost:4000/ 检查是否安装成功hexo 配置hexo-theme-next主题的配置 最强主题基本上所有的配置信息都能满足,优雅,文档齐全 安装 Next主题 基本和教程走一边,就可以得到一个很牛的网站了 三种主题样式的选择： hexo/themes/next/_config.xml 搜索 scheme 注册云存储存储图片防止图片链接失效,和在博客迁移过程中导致的图片获取异常,丢失. 统一管理文章中的图片 七牛 域名绑定Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sitesMore info: Deployment1$ hexo deploy 常用的方法命令简写1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 一般的发布步骤123hexo clean #删除产生的文件和缓存hexo generate # 生成静太文件hexo deploy # 发布网页 问题解决 ERROR Plugin load failed: hexo-server 解决: npm install hexo-server-]]></content>
    </entry>

    
  
  
</search>
